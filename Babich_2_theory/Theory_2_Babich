I.В C есть 4 типа памяти:
	1) Статический (static). Переменная  static доступна только в области видимости, где была создана, но ее значение сохраняется.
Время жизни совпадает со временем работы программы.
	2) Автоматический тип (локальные переменные). Память выделяется на стэке, а переменная существует только в области видимости.
	3) Внешний (extern). Внешние переменные доступны везде (даже в другом файле), независимо от порядка объявления в 
коде.
	4) Регистровый (register). Память хранится в регистрах процессора.

II-IV. Области видимости.
	1) В С область видимости определяется местом объявления идентификатора.
	2) В C++ появляется ключевое слово namespace, оно создает пространство имен, например:

namespace grabli
{
	int zhelezyaka;
}

int zhelezyaka = 100;
grabli::zhelezyaka = 120;

	Здесь у железяк будут разные значения, потому что одна из них принадлежит пространству имен "грабли". При этом железяки 
существуют одновременно.

	3) ключевые слова public и private управляют областями видимости в объявлении классов:
методы и переменные поля private не доступны только для своего класса, а public - доступны в области видимости, к которой
относится класс.
		внутри класса по умолчанию стоит поле private.

V. конструктор и деструктор - обязаельные методы класса, при этом их название фиксировано (class_name(...) и ~class_name() 
соответсвенно), и они ничего не возвращают. Класс создается с помощью вызова конструктора, а диструктор вызывается Автоматически
в конце программы.

VI. new и delete выполняют роль аналогичную malloc и free. new выделяет память 	для хранения любого типа данных и возвращает 
указатель на область памяти (T* ptr = new T;), а delete освобождает память, выделенную с помощью new по указателю ptr
(delete ptr;). Отличие new и delete от malloc и free в том, что первые кроме выделения и освобождения памяти вызывают
соответствующий конструктор и деструктор, а в случае неудачи new вызывает исключение (когда malloc возвращает NULL).

VII. Ключевое слово this - это prvalue выражение, представляющее собой скрытый константный указатль на объект вызывающий 
функцию-член. this может изпользоваться в теле нестатического члена класса, в том числе в списке инициализации; в декларации 
функций-членов после CV-квалификации (т.е this->...);  в default member initialize (не знаю как перевести, но это когда 
{'a', 'b'...}). Также можно delete this; , если объект получил память от new.

VIII. std::cin и std::cout принадлежат библиотеке iostream и отвечают за ввод и вывод.
	Операция >> позволяет получить что-то из выходного потока, а << - положить в выходной поток:
int val = 228;
std::cout << 228; // будет выведено число 228.

int val;
std::cin >> val; // вал приобретет значение, полученное из потока.

Последовательность символов из потока читается до пробела.